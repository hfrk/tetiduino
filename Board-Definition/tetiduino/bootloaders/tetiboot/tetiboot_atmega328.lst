
tetiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00007c00  00007c00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000024e  2**0
                  CONTENTS, READONLY
  3 .comment      00000011  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000261  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a7  00000000  00000000  00000289  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e1  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039c  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a6  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f8  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7c00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7c02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7c04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    7c06:	81 ff       	sbrs	r24, 1
    7c08:	f0 d0       	rcall	.+480    	; 0x7dea <appStart>
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7c0a:	82 e0       	ldi	r24, 0x02	; 2
    7c0c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7c10:	88 e1       	ldi	r24, 0x18	; 24
    7c12:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7c16:	96 e0       	ldi	r25, 0x06	; 6
    7c18:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7c1c:	90 e1       	ldi	r25, 0x10	; 16
    7c1e:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7c22:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  WDTCSR = x;
    7c26:	8e e0       	ldi	r24, 0x0E	; 14
    7c28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7c2c:	25 9a       	sbi	0x04, 5	; 4
   * Making these local and in registers prevents the need for initializing
   * them, and also saves space because code no longer stores to memory.
   * (initializing address keeps the compiler happy, but isn't really
   *  necessary, and uses 4 bytes of flash.)
   */
  register uint16_t address = 0;
    7c2e:	d0 e0       	ldi	r29, 0x00	; 0
    7c30:	c0 e0       	ldi	r28, 0x00	; 0
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7c32:	98 e1       	ldi	r25, 0x18	; 24
    7c34:	e9 2e       	mov	r14, r25
  WDTCSR = x;
    7c36:	28 e0       	ldi	r18, 0x08	; 8
    7c38:	d2 2e       	mov	r13, r18
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7c3a:	cc 24       	eor	r12, r12
    7c3c:	c3 94       	inc	r12
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7c3e:	35 e0       	ldi	r19, 0x05	; 5
    7c40:	93 2e       	mov	r9, r19
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7c42:	41 e1       	ldi	r20, 0x11	; 17
    7c44:	84 2e       	mov	r8, r20
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7c46:	53 e0       	ldi	r21, 0x03	; 3
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7c48:	f5 2e       	mov	r15, r21
    7c4a:	aa d0       	rcall	.+340    	; 0x7da0 <getch>

    if(ch == STK_GET_PARAMETER) {
    7c4c:	81 34       	cpi	r24, 0x41	; 65
      unsigned char which = getch();
    7c4e:	81 f4       	brne	.+32     	; 0x7c70 <main+0x70>
    7c50:	a7 d0       	rcall	.+334    	; 0x7da0 <getch>
      verifySpace();
    7c52:	18 2f       	mov	r17, r24
      if (which == 0x82) {
    7c54:	b1 d0       	rcall	.+354    	; 0x7db8 <verifySpace>
    7c56:	12 38       	cpi	r17, 0x82	; 130
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
    7c58:	19 f4       	brne	.+6      	; 0x7c60 <main+0x60>
    7c5a:	84 e0       	ldi	r24, 0x04	; 4
    7c5c:	9a d0       	rcall	.+308    	; 0x7d92 <putch>
      } else if (which == 0x81) {
    7c5e:	96 c0       	rjmp	.+300    	; 0x7d8c <main+0x18c>
	  putch(OPTIBOOT_MAJVER);
    7c60:	11 38       	cpi	r17, 0x81	; 129
    7c62:	19 f4       	brne	.+6      	; 0x7c6a <main+0x6a>
    7c64:	84 e0       	ldi	r24, 0x04	; 4
    7c66:	95 d0       	rcall	.+298    	; 0x7d92 <putch>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7c68:	91 c0       	rjmp	.+290    	; 0x7d8c <main+0x18c>
    7c6a:	83 e0       	ldi	r24, 0x03	; 3
    7c6c:	92 d0       	rcall	.+292    	; 0x7d92 <putch>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7c6e:	8e c0       	rjmp	.+284    	; 0x7d8c <main+0x18c>
      // SET DEVICE is ignored
      getNch(20);
    7c70:	82 34       	cpi	r24, 0x42	; 66
    7c72:	19 f4       	brne	.+6      	; 0x7c7a <main+0x7a>
    7c74:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7c76:	ac d0       	rcall	.+344    	; 0x7dd0 <getNch>
    7c78:	89 c0       	rjmp	.+274    	; 0x7d8c <main+0x18c>
      // SET DEVICE EXT is ignored
      getNch(5);
    7c7a:	85 34       	cpi	r24, 0x45	; 69
    7c7c:	19 f4       	brne	.+6      	; 0x7c84 <main+0x84>
    7c7e:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7c80:	a7 d0       	rcall	.+334    	; 0x7dd0 <getNch>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7c82:	84 c0       	rjmp	.+264    	; 0x7d8c <main+0x18c>
    7c84:	85 35       	cpi	r24, 0x55	; 85
    7c86:	49 f4       	brne	.+18     	; 0x7c9a <main+0x9a>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7c88:	8b d0       	rcall	.+278    	; 0x7da0 <getch>
    7c8a:	c8 2f       	mov	r28, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7c8c:	d0 e0       	ldi	r29, 0x00	; 0
    7c8e:	88 d0       	rcall	.+272    	; 0x7da0 <getch>
      address = newAddress;
      verifySpace();
    7c90:	d8 2b       	or	r29, r24
    7c92:	cc 0f       	add	r28, r28
    }
    else if(ch == STK_UNIVERSAL) {
    7c94:	dd 1f       	adc	r29, r29
      // UNIVERSAL command is ignored
      getNch(4);
    7c96:	90 d0       	rcall	.+288    	; 0x7db8 <verifySpace>
    7c98:	79 c0       	rjmp	.+242    	; 0x7d8c <main+0x18c>
    7c9a:	86 35       	cpi	r24, 0x56	; 86
      putch(0x00);
    7c9c:	29 f4       	brne	.+10     	; 0x7ca8 <main+0xa8>
    7c9e:	84 e0       	ldi	r24, 0x04	; 4
    7ca0:	97 d0       	rcall	.+302    	; 0x7dd0 <getNch>
    7ca2:	80 e0       	ldi	r24, 0x00	; 0
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7ca4:	76 d0       	rcall	.+236    	; 0x7d92 <putch>
    7ca6:	72 c0       	rjmp	.+228    	; 0x7d8c <main+0x18c>
    7ca8:	84 36       	cpi	r24, 0x64	; 100
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    7caa:	09 f0       	breq	.+2      	; 0x7cae <main+0xae>
    7cac:	45 c0       	rjmp	.+138    	; 0x7d38 <main+0x138>
      length = getch();
    7cae:	78 d0       	rcall	.+240    	; 0x7da0 <getch>
    7cb0:	77 d0       	rcall	.+238    	; 0x7da0 <getch>
    7cb2:	78 2e       	mov	r7, r24
      getch();
    7cb4:	75 d0       	rcall	.+234    	; 0x7da0 <getch>
    7cb6:	00 e0       	ldi	r16, 0x00	; 0
    7cb8:	11 e0       	ldi	r17, 0x01	; 1

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7cba:	c1 15       	cp	r28, r1
    7cbc:	80 e7       	ldi	r24, 0x70	; 112
    7cbe:	d8 07       	cpc	r29, r24
    7cc0:	30 f4       	brcc	.+12     	; 0x7cce <main+0xce>
    7cc2:	fe 01       	movw	r30, r28
    7cc4:	f7 be       	out	0x37, r15	; 55
    7cc6:	e8 95       	spm
    7cc8:	00 e0       	ldi	r16, 0x00	; 0
    7cca:	11 e0       	ldi	r17, 0x01	; 1
    7ccc:	00 c0       	rjmp	.+0      	; 0x7cce <main+0xce>

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7cce:	58 01       	movw	r10, r16
    7cd0:	ff ef       	ldi	r31, 0xFF	; 255
    7cd2:	af 1a       	sub	r10, r31
    7cd4:	bf 0a       	sbc	r11, r31
    7cd6:	64 d0       	rcall	.+200    	; 0x7da0 <getch>
    7cd8:	f8 01       	movw	r30, r16
    7cda:	80 83       	st	Z, r24
    7cdc:	85 01       	movw	r16, r10
      while (--length);
    7cde:	7a 10       	cpse	r7, r10
    7ce0:	f6 cf       	rjmp	.-20     	; 0x7cce <main+0xce>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7ce2:	c1 15       	cp	r28, r1
    7ce4:	f0 e7       	ldi	r31, 0x70	; 112
    7ce6:	df 07       	cpc	r29, r31
    7ce8:	18 f0       	brcs	.+6      	; 0x7cf0 <main+0xf0>
    7cea:	fe 01       	movw	r30, r28
    7cec:	f7 be       	out	0x37, r15	; 55
    7cee:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    7cf0:	63 d0       	rcall	.+198    	; 0x7db8 <verifySpace>
    7cf2:	07 b6       	in	r0, 0x37	; 55

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7cf4:	00 fc       	sbrc	r0, 0
    7cf6:	fd cf       	rjmp	.-6      	; 0x7cf2 <main+0xf2>
    7cf8:	fe 01       	movw	r30, r28
    7cfa:	a0 e0       	ldi	r26, 0x00	; 0
        buff[1] = 0xce; // rjmp 0x1d00 instruction
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
    7cfc:	b1 e0       	ldi	r27, 0x01	; 1
    7cfe:	01 c0       	rjmp	.+2      	; 0x7d02 <main+0x102>
    7d00:	d9 01       	movw	r26, r18
    7d02:	9c 91       	ld	r25, X
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7d04:	9d 01       	movw	r18, r26
    7d06:	2e 5f       	subi	r18, 0xFE	; 254
    7d08:	3f 4f       	sbci	r19, 0xFF	; 255
    7d0a:	11 96       	adiw	r26, 0x01	; 1
        a |= (*bufPtr++) << 8;
    7d0c:	8c 91       	ld	r24, X
    7d0e:	11 97       	sbiw	r26, 0x01	; 1
    7d10:	89 27       	eor	r24, r25
    7d12:	98 27       	eor	r25, r24
    7d14:	89 27       	eor	r24, r25
    7d16:	0c 01       	movw	r0, r24
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7d18:	c7 be       	out	0x37, r12	; 55
    7d1a:	e8 95       	spm
        addrPtr += 2;
      } while (--ch);
    7d1c:	11 24       	eor	r1, r1
    7d1e:	32 96       	adiw	r30, 0x02	; 2
    7d20:	ae 37       	cpi	r26, 0x7E	; 126

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7d22:	b1 40       	sbci	r27, 0x01	; 1
    7d24:	69 f7       	brne	.-38     	; 0x7d00 <main+0x100>
    7d26:	fe 01       	movw	r30, r28
      boot_spm_busy_wait();
    7d28:	97 be       	out	0x37, r9	; 55
    7d2a:	e8 95       	spm

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7d2c:	07 b6       	in	r0, 0x37	; 55
    7d2e:	00 fc       	sbrc	r0, 0
    7d30:	fd cf       	rjmp	.-6      	; 0x7d2c <main+0x12c>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7d32:	87 be       	out	0x37, r8	; 55
    7d34:	e8 95       	spm
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    7d36:	2a c0       	rjmp	.+84     	; 0x7d8c <main+0x18c>
    7d38:	84 37       	cpi	r24, 0x74	; 116
      length = getch();
    7d3a:	a9 f4       	brne	.+42     	; 0x7d66 <main+0x166>
    7d3c:	31 d0       	rcall	.+98     	; 0x7da0 <getch>
      getch();
    7d3e:	30 d0       	rcall	.+96     	; 0x7da0 <getch>

      verifySpace();
    7d40:	b8 2e       	mov	r11, r24
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
      // READ PAGE - we only read flash
      getch();			/* getlen() */
      length = getch();
    7d42:	2e d0       	rcall	.+92     	; 0x7da0 <getch>
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7d44:	39 d0       	rcall	.+114    	; 0x7db8 <verifySpace>
    7d46:	ab 2c       	mov	r10, r11
    7d48:	fe 01       	movw	r30, r28
    7d4a:	8f 01       	movw	r16, r30
    7d4c:	0f 5f       	subi	r16, 0xFF	; 255
    7d4e:	1f 4f       	sbci	r17, 0xFF	; 255
      while (--length);
    7d50:	84 91       	lpm	r24, Z
    7d52:	1f d0       	rcall	.+62     	; 0x7d92 <putch>
    7d54:	aa 94       	dec	r10
    7d56:	f8 01       	movw	r30, r16
    7d58:	a1 10       	cpse	r10, r1
    7d5a:	f7 cf       	rjmp	.-18     	; 0x7d4a <main+0x14a>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7d5c:	21 96       	adiw	r28, 0x01	; 1
    7d5e:	ba 94       	dec	r11
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7d60:	cb 0d       	add	r28, r11
    7d62:	d1 1d       	adc	r29, r1
      putch(SIGNATURE_0);
    7d64:	13 c0       	rjmp	.+38     	; 0x7d8c <main+0x18c>
    7d66:	85 37       	cpi	r24, 0x75	; 117
    7d68:	41 f4       	brne	.+16     	; 0x7d7a <main+0x17a>
      putch(SIGNATURE_1);
    7d6a:	26 d0       	rcall	.+76     	; 0x7db8 <verifySpace>
    7d6c:	8e e1       	ldi	r24, 0x1E	; 30
    7d6e:	11 d0       	rcall	.+34     	; 0x7d92 <putch>
      putch(SIGNATURE_2);
    7d70:	85 e9       	ldi	r24, 0x95	; 149
    7d72:	0f d0       	rcall	.+30     	; 0x7d92 <putch>
    7d74:	8f e0       	ldi	r24, 0x0F	; 15
    7d76:	0d d0       	rcall	.+26     	; 0x7d92 <putch>
    }
    else if (ch == 'Q') {
    7d78:	09 c0       	rjmp	.+18     	; 0x7d8c <main+0x18c>
    7d7a:	81 35       	cpi	r24, 0x51	; 81
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7d7c:	31 f4       	brne	.+12     	; 0x7d8a <main+0x18a>
    7d7e:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
  WDTCSR = x;
    7d82:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__DATA_REGION_ORIGIN__>
      putch(SIGNATURE_2);
    }
    else if (ch == 'Q') {
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    7d86:	18 d0       	rcall	.+48     	; 0x7db8 <verifySpace>
    7d88:	01 c0       	rjmp	.+2      	; 0x7d8c <main+0x18c>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7d8a:	16 d0       	rcall	.+44     	; 0x7db8 <verifySpace>
    7d8c:	80 e1       	ldi	r24, 0x10	; 16
    }
    putch(STK_OK);
    7d8e:	01 d0       	rcall	.+2      	; 0x7d92 <putch>
    7d90:	5c cf       	rjmp	.-328    	; 0x7c4a <main+0x4a>

00007d92 <putch>:
    7d92:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7d96:	95 ff       	sbrs	r25, 5
    7d98:	fc cf       	rjmp	.-8      	; 0x7d92 <putch>
  UDR0 = ch;
    7d9a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7d9e:	08 95       	ret

00007da0 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    7da0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7da4:	87 ff       	sbrs	r24, 7
    7da6:	fc cf       	rjmp	.-8      	; 0x7da0 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    7da8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7dac:	84 fd       	sbrc	r24, 4
    7dae:	01 c0       	rjmp	.+2      	; 0x7db2 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7db0:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    7db2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7db6:	08 95       	ret

00007db8 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7db8:	f3 df       	rcall	.-26     	; 0x7da0 <getch>
    7dba:	80 32       	cpi	r24, 0x20	; 32
    7dbc:	39 f0       	breq	.+14     	; 0x7dcc <verifySpace+0x14>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7dbe:	88 e1       	ldi	r24, 0x18	; 24
    7dc0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  WDTCSR = x;
    7dc4:	88 e0       	ldi	r24, 0x08	; 8
    7dc6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    7dca:	ff cf       	rjmp	.-2      	; 0x7dca <verifySpace+0x12>
  if (getch() != CRC_EOP) {
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7dcc:	84 e1       	ldi	r24, 0x14	; 20
    7dce:	e1 cf       	rjmp	.-62     	; 0x7d92 <putch>

00007dd0 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7dd0:	cf 93       	push	r28
  do getch(); while (--count);
    7dd2:	c8 2f       	mov	r28, r24
    7dd4:	e5 df       	rcall	.-54     	; 0x7da0 <getch>
    7dd6:	c1 50       	subi	r28, 0x01	; 1
  verifySpace();
}
    7dd8:	e9 f7       	brne	.-6      	; 0x7dd4 <getNch+0x4>
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7dda:	cf 91       	pop	r28
    7ddc:	ed cf       	rjmp	.-38     	; 0x7db8 <verifySpace>

00007dde <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7dde:	e0 e6       	ldi	r30, 0x60	; 96
    7de0:	f0 e0       	ldi	r31, 0x00	; 0
    7de2:	98 e1       	ldi	r25, 0x18	; 24
    7de4:	90 83       	st	Z, r25
  WDTCSR = x;
    7de6:	80 83       	st	Z, r24
}
    7de8:	08 95       	ret

00007dea <appStart>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7dea:	e0 e6       	ldi	r30, 0x60	; 96
    7dec:	f0 e0       	ldi	r31, 0x00	; 0
    7dee:	88 e1       	ldi	r24, 0x18	; 24
    7df0:	80 83       	st	Z, r24
  WDTCSR = x;
    7df2:	10 82       	st	Z, r1
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
  __asm__ __volatile__ (
    7df4:	ee 27       	eor	r30, r30
    7df6:	ff 27       	eor	r31, r31
    7df8:	09 94       	ijmp
