
tetiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00007e00  00007e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000272  2**0
                  CONTENTS, READONLY
  3 .comment      00000011  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000285  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004f0  00000000  00000000  000002ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ff  00000000  00000000  0000079d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d4  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a7  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000323  00000000  00000000  00000fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000012c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7e00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7e02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7e04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    7e06:	81 ff       	sbrs	r24, 1
    7e08:	02 d1       	rcall	.+516    	; 0x800e <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e0a:	85 e0       	ldi	r24, 0x05	; 5
    7e0c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7e10:	82 e0       	ldi	r24, 0x02	; 2
    7e12:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7e16:	88 e1       	ldi	r24, 0x18	; 24
    7e18:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7e1c:	96 e0       	ldi	r25, 0x06	; 6
    7e1e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e22:	90 e1       	ldi	r25, 0x10	; 16
    7e24:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7e28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  WDTCSR = x;
    7e2c:	8e e0       	ldi	r24, 0x0E	; 14
    7e2e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e32:	25 9a       	sbi	0x04, 5	; 4
    7e34:	8c e3       	ldi	r24, 0x3C	; 60
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e36:	20 e3       	ldi	r18, 0x30	; 48
    7e38:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    7e3a:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e3c:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    7e40:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    TIFR1 = _BV(TOV1);
    7e44:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7e46:	b0 9b       	sbis	0x16, 0	; 22
    7e48:	fe cf       	rjmp	.-4      	; 0x7e46 <main+0x46>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7e4a:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e4c:	a8 95       	wdr
    7e4e:	81 50       	subi	r24, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7e50:	a9 f7       	brne	.-22     	; 0x7e3c <main+0x3c>
   * Making these local and in registers prevents the need for initializing
   * them, and also saves space because code no longer stores to memory.
   * (initializing address keeps the compiler happy, but isn't really
   *  necessary, and uses 4 bytes of flash.)
   */
  register uint16_t address = 0;
    7e52:	d0 e0       	ldi	r29, 0x00	; 0
    7e54:	c0 e0       	ldi	r28, 0x00	; 0
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7e56:	98 e1       	ldi	r25, 0x18	; 24
    7e58:	e9 2e       	mov	r14, r25
  WDTCSR = x;
    7e5a:	28 e0       	ldi	r18, 0x08	; 8
    7e5c:	d2 2e       	mov	r13, r18
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e5e:	cc 24       	eor	r12, r12
    7e60:	c3 94       	inc	r12
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7e62:	35 e0       	ldi	r19, 0x05	; 5
    7e64:	93 2e       	mov	r9, r19
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7e66:	41 e1       	ldi	r20, 0x11	; 17
    7e68:	84 2e       	mov	r8, r20
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7e6a:	53 e0       	ldi	r21, 0x03	; 3
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e6c:	f5 2e       	mov	r15, r21
    7e6e:	aa d0       	rcall	.+340    	; 0x7fc4 <getch>

    if(ch == STK_GET_PARAMETER) {
    7e70:	81 34       	cpi	r24, 0x41	; 65
      unsigned char which = getch();
    7e72:	81 f4       	brne	.+32     	; 0x7e94 <main+0x94>
    7e74:	a7 d0       	rcall	.+334    	; 0x7fc4 <getch>
      verifySpace();
    7e76:	18 2f       	mov	r17, r24
      if (which == 0x82) {
    7e78:	b1 d0       	rcall	.+354    	; 0x7fdc <verifySpace>
    7e7a:	12 38       	cpi	r17, 0x82	; 130
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
    7e7c:	19 f4       	brne	.+6      	; 0x7e84 <main+0x84>
    7e7e:	84 e0       	ldi	r24, 0x04	; 4
    7e80:	9a d0       	rcall	.+308    	; 0x7fb6 <putch>
      } else if (which == 0x81) {
    7e82:	96 c0       	rjmp	.+300    	; 0x7fb0 <main+0x1b0>
	  putch(OPTIBOOT_MAJVER);
    7e84:	11 38       	cpi	r17, 0x81	; 129
    7e86:	19 f4       	brne	.+6      	; 0x7e8e <main+0x8e>
    7e88:	84 e0       	ldi	r24, 0x04	; 4
    7e8a:	95 d0       	rcall	.+298    	; 0x7fb6 <putch>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7e8c:	91 c0       	rjmp	.+290    	; 0x7fb0 <main+0x1b0>
    7e8e:	83 e0       	ldi	r24, 0x03	; 3
    7e90:	92 d0       	rcall	.+292    	; 0x7fb6 <putch>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7e92:	8e c0       	rjmp	.+284    	; 0x7fb0 <main+0x1b0>
      // SET DEVICE is ignored
      getNch(20);
    7e94:	82 34       	cpi	r24, 0x42	; 66
    7e96:	19 f4       	brne	.+6      	; 0x7e9e <main+0x9e>
    7e98:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7e9a:	ac d0       	rcall	.+344    	; 0x7ff4 <getNch>
    7e9c:	89 c0       	rjmp	.+274    	; 0x7fb0 <main+0x1b0>
      // SET DEVICE EXT is ignored
      getNch(5);
    7e9e:	85 34       	cpi	r24, 0x45	; 69
    7ea0:	19 f4       	brne	.+6      	; 0x7ea8 <main+0xa8>
    7ea2:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7ea4:	a7 d0       	rcall	.+334    	; 0x7ff4 <getNch>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7ea6:	84 c0       	rjmp	.+264    	; 0x7fb0 <main+0x1b0>
    7ea8:	85 35       	cpi	r24, 0x55	; 85
    7eaa:	49 f4       	brne	.+18     	; 0x7ebe <main+0xbe>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7eac:	8b d0       	rcall	.+278    	; 0x7fc4 <getch>
    7eae:	c8 2f       	mov	r28, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7eb0:	d0 e0       	ldi	r29, 0x00	; 0
    7eb2:	88 d0       	rcall	.+272    	; 0x7fc4 <getch>
      address = newAddress;
      verifySpace();
    7eb4:	d8 2b       	or	r29, r24
    7eb6:	cc 0f       	add	r28, r28
    }
    else if(ch == STK_UNIVERSAL) {
    7eb8:	dd 1f       	adc	r29, r29
      // UNIVERSAL command is ignored
      getNch(4);
    7eba:	90 d0       	rcall	.+288    	; 0x7fdc <verifySpace>
    7ebc:	79 c0       	rjmp	.+242    	; 0x7fb0 <main+0x1b0>
    7ebe:	86 35       	cpi	r24, 0x56	; 86
      putch(0x00);
    7ec0:	29 f4       	brne	.+10     	; 0x7ecc <main+0xcc>
    7ec2:	84 e0       	ldi	r24, 0x04	; 4
    7ec4:	97 d0       	rcall	.+302    	; 0x7ff4 <getNch>
    7ec6:	80 e0       	ldi	r24, 0x00	; 0
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7ec8:	76 d0       	rcall	.+236    	; 0x7fb6 <putch>
    7eca:	72 c0       	rjmp	.+228    	; 0x7fb0 <main+0x1b0>
    7ecc:	84 36       	cpi	r24, 0x64	; 100
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    7ece:	09 f0       	breq	.+2      	; 0x7ed2 <main+0xd2>
    7ed0:	45 c0       	rjmp	.+138    	; 0x7f5c <main+0x15c>
      length = getch();
    7ed2:	78 d0       	rcall	.+240    	; 0x7fc4 <getch>
    7ed4:	77 d0       	rcall	.+238    	; 0x7fc4 <getch>
    7ed6:	78 2e       	mov	r7, r24
      getch();
    7ed8:	75 d0       	rcall	.+234    	; 0x7fc4 <getch>
    7eda:	00 e0       	ldi	r16, 0x00	; 0
    7edc:	11 e0       	ldi	r17, 0x01	; 1

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7ede:	c1 15       	cp	r28, r1
    7ee0:	80 e7       	ldi	r24, 0x70	; 112
    7ee2:	d8 07       	cpc	r29, r24
    7ee4:	30 f4       	brcc	.+12     	; 0x7ef2 <main+0xf2>
    7ee6:	fe 01       	movw	r30, r28
    7ee8:	f7 be       	out	0x37, r15	; 55
    7eea:	e8 95       	spm
    7eec:	00 e0       	ldi	r16, 0x00	; 0
    7eee:	11 e0       	ldi	r17, 0x01	; 1
    7ef0:	00 c0       	rjmp	.+0      	; 0x7ef2 <main+0xf2>

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7ef2:	58 01       	movw	r10, r16
    7ef4:	ff ef       	ldi	r31, 0xFF	; 255
    7ef6:	af 1a       	sub	r10, r31
    7ef8:	bf 0a       	sbc	r11, r31
    7efa:	64 d0       	rcall	.+200    	; 0x7fc4 <getch>
    7efc:	f8 01       	movw	r30, r16
    7efe:	80 83       	st	Z, r24
    7f00:	85 01       	movw	r16, r10
      while (--length);
    7f02:	7a 10       	cpse	r7, r10
    7f04:	f6 cf       	rjmp	.-20     	; 0x7ef2 <main+0xf2>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7f06:	c1 15       	cp	r28, r1
    7f08:	f0 e7       	ldi	r31, 0x70	; 112
    7f0a:	df 07       	cpc	r29, r31
    7f0c:	18 f0       	brcs	.+6      	; 0x7f14 <main+0x114>
    7f0e:	fe 01       	movw	r30, r28
    7f10:	f7 be       	out	0x37, r15	; 55
    7f12:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    7f14:	63 d0       	rcall	.+198    	; 0x7fdc <verifySpace>
    7f16:	07 b6       	in	r0, 0x37	; 55

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7f18:	00 fc       	sbrc	r0, 0
    7f1a:	fd cf       	rjmp	.-6      	; 0x7f16 <main+0x116>
    7f1c:	fe 01       	movw	r30, r28
    7f1e:	a0 e0       	ldi	r26, 0x00	; 0
        buff[1] = 0xce; // rjmp 0x1d00 instruction
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
    7f20:	b1 e0       	ldi	r27, 0x01	; 1
    7f22:	01 c0       	rjmp	.+2      	; 0x7f26 <main+0x126>
    7f24:	d9 01       	movw	r26, r18
    7f26:	9c 91       	ld	r25, X
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7f28:	9d 01       	movw	r18, r26
    7f2a:	2e 5f       	subi	r18, 0xFE	; 254
    7f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    7f2e:	11 96       	adiw	r26, 0x01	; 1
        a |= (*bufPtr++) << 8;
    7f30:	8c 91       	ld	r24, X
    7f32:	11 97       	sbiw	r26, 0x01	; 1
    7f34:	89 27       	eor	r24, r25
    7f36:	98 27       	eor	r25, r24
    7f38:	89 27       	eor	r24, r25
    7f3a:	0c 01       	movw	r0, r24
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7f3c:	c7 be       	out	0x37, r12	; 55
    7f3e:	e8 95       	spm
        addrPtr += 2;
      } while (--ch);
    7f40:	11 24       	eor	r1, r1
    7f42:	32 96       	adiw	r30, 0x02	; 2
    7f44:	ae 37       	cpi	r26, 0x7E	; 126

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7f46:	b1 40       	sbci	r27, 0x01	; 1
    7f48:	69 f7       	brne	.-38     	; 0x7f24 <main+0x124>
    7f4a:	fe 01       	movw	r30, r28
      boot_spm_busy_wait();
    7f4c:	97 be       	out	0x37, r9	; 55
    7f4e:	e8 95       	spm

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7f50:	07 b6       	in	r0, 0x37	; 55
    7f52:	00 fc       	sbrc	r0, 0
    7f54:	fd cf       	rjmp	.-6      	; 0x7f50 <main+0x150>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f56:	87 be       	out	0x37, r8	; 55
    7f58:	e8 95       	spm
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    7f5a:	2a c0       	rjmp	.+84     	; 0x7fb0 <main+0x1b0>
    7f5c:	84 37       	cpi	r24, 0x74	; 116
      length = getch();
    7f5e:	a9 f4       	brne	.+42     	; 0x7f8a <main+0x18a>
    7f60:	31 d0       	rcall	.+98     	; 0x7fc4 <getch>
      getch();
    7f62:	30 d0       	rcall	.+96     	; 0x7fc4 <getch>

      verifySpace();
    7f64:	b8 2e       	mov	r11, r24
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
      // READ PAGE - we only read flash
      getch();			/* getlen() */
      length = getch();
    7f66:	2e d0       	rcall	.+92     	; 0x7fc4 <getch>
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7f68:	39 d0       	rcall	.+114    	; 0x7fdc <verifySpace>
    7f6a:	ab 2c       	mov	r10, r11
    7f6c:	fe 01       	movw	r30, r28
    7f6e:	8f 01       	movw	r16, r30
    7f70:	0f 5f       	subi	r16, 0xFF	; 255
    7f72:	1f 4f       	sbci	r17, 0xFF	; 255
      while (--length);
    7f74:	84 91       	lpm	r24, Z
    7f76:	1f d0       	rcall	.+62     	; 0x7fb6 <putch>
    7f78:	aa 94       	dec	r10
    7f7a:	f8 01       	movw	r30, r16
    7f7c:	a1 10       	cpse	r10, r1
    7f7e:	f7 cf       	rjmp	.-18     	; 0x7f6e <main+0x16e>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f80:	21 96       	adiw	r28, 0x01	; 1
    7f82:	ba 94       	dec	r11
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f84:	cb 0d       	add	r28, r11
    7f86:	d1 1d       	adc	r29, r1
      putch(SIGNATURE_0);
    7f88:	13 c0       	rjmp	.+38     	; 0x7fb0 <main+0x1b0>
    7f8a:	85 37       	cpi	r24, 0x75	; 117
    7f8c:	41 f4       	brne	.+16     	; 0x7f9e <main+0x19e>
      putch(SIGNATURE_1);
    7f8e:	26 d0       	rcall	.+76     	; 0x7fdc <verifySpace>
    7f90:	8e e1       	ldi	r24, 0x1E	; 30
    7f92:	11 d0       	rcall	.+34     	; 0x7fb6 <putch>
      putch(SIGNATURE_2);
    7f94:	85 e9       	ldi	r24, 0x95	; 149
    7f96:	0f d0       	rcall	.+30     	; 0x7fb6 <putch>
    7f98:	8f e0       	ldi	r24, 0x0F	; 15
    7f9a:	0d d0       	rcall	.+26     	; 0x7fb6 <putch>
    }
    else if (ch == 'Q') {
    7f9c:	09 c0       	rjmp	.+18     	; 0x7fb0 <main+0x1b0>
    7f9e:	81 35       	cpi	r24, 0x51	; 81
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fa0:	31 f4       	brne	.+12     	; 0x7fae <main+0x1ae>
    7fa2:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
  WDTCSR = x;
    7fa6:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__DATA_REGION_ORIGIN__>
      putch(SIGNATURE_2);
    }
    else if (ch == 'Q') {
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    7faa:	18 d0       	rcall	.+48     	; 0x7fdc <verifySpace>
    7fac:	01 c0       	rjmp	.+2      	; 0x7fb0 <main+0x1b0>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7fae:	16 d0       	rcall	.+44     	; 0x7fdc <verifySpace>
    7fb0:	80 e1       	ldi	r24, 0x10	; 16
    }
    putch(STK_OK);
    7fb2:	01 d0       	rcall	.+2      	; 0x7fb6 <putch>
    7fb4:	5c cf       	rjmp	.-328    	; 0x7e6e <main+0x6e>

00007fb6 <putch>:
    7fb6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7fba:	95 ff       	sbrs	r25, 5
    7fbc:	fc cf       	rjmp	.-8      	; 0x7fb6 <putch>
  UDR0 = ch;
    7fbe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7fc2:	08 95       	ret

00007fc4 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    7fc4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7fc8:	87 ff       	sbrs	r24, 7
    7fca:	fc cf       	rjmp	.-8      	; 0x7fc4 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    7fcc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7fd0:	84 fd       	sbrc	r24, 4
    7fd2:	01 c0       	rjmp	.+2      	; 0x7fd6 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fd4:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    7fd6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7fda:	08 95       	ret

00007fdc <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fdc:	f3 df       	rcall	.-26     	; 0x7fc4 <getch>
    7fde:	80 32       	cpi	r24, 0x20	; 32
    7fe0:	39 f0       	breq	.+14     	; 0x7ff0 <verifySpace+0x14>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fe2:	88 e1       	ldi	r24, 0x18	; 24
    7fe4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  WDTCSR = x;
    7fe8:	88 e0       	ldi	r24, 0x08	; 8
    7fea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    7fee:	ff cf       	rjmp	.-2      	; 0x7fee <verifySpace+0x12>
  if (getch() != CRC_EOP) {
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7ff0:	84 e1       	ldi	r24, 0x14	; 20
    7ff2:	e1 cf       	rjmp	.-62     	; 0x7fb6 <putch>

00007ff4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7ff4:	cf 93       	push	r28
  do getch(); while (--count);
    7ff6:	c8 2f       	mov	r28, r24
    7ff8:	e5 df       	rcall	.-54     	; 0x7fc4 <getch>
    7ffa:	c1 50       	subi	r28, 0x01	; 1
  verifySpace();
}
    7ffc:	e9 f7       	brne	.-6      	; 0x7ff8 <getNch+0x4>
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7ffe:	cf 91       	pop	r28
    8000:	ed cf       	rjmp	.-38     	; 0x7fdc <verifySpace>

00008002 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    8002:	e0 e6       	ldi	r30, 0x60	; 96
    8004:	f0 e0       	ldi	r31, 0x00	; 0
    8006:	98 e1       	ldi	r25, 0x18	; 24
    8008:	90 83       	st	Z, r25
  WDTCSR = x;
    800a:	80 83       	st	Z, r24
}
    800c:	08 95       	ret

0000800e <appStart>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    800e:	e0 e6       	ldi	r30, 0x60	; 96
    8010:	f0 e0       	ldi	r31, 0x00	; 0
    8012:	88 e1       	ldi	r24, 0x18	; 24
    8014:	80 83       	st	Z, r24
  WDTCSR = x;
    8016:	10 82       	st	Z, r1
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
  __asm__ __volatile__ (
    8018:	ee 27       	eor	r30, r30
    801a:	ff 27       	eor	r31, r31
    801c:	09 94       	ijmp
